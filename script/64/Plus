#!/bin/bash

clear

# Instalar pacotes necessários
apt-get install lolcat figlet curl git boxes -y &>/dev/null

# Garantir que o script seja executado como root
if [[ "$(whoami)" != "root" ]]; then
    echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- \033[1;33mVocê precisa executar como root\033[0m"
    exit 1
fi

cd $HOME

# Decodificar variáveis
_lnk=$(echo 'z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r' | sed -e 's/[^a-z.]//ig' | rev)
_Ink=$(echo '/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×' | sed -e 's/[^a-z/]//ig')
_1nk=$(echo '/3×u3#s×87r/83×l2×4×i0b×' | sed -e 's/[^a-z/]//ig')

# Função para mostrar uma barra de progresso
function fun_bar() {
    comando[0]="$1"
    comando[1]="$2"
    (
        [[ -e $HOME/fim ]] && rm $HOME/fim
        ${comando[0]} -y &>/dev/null
        ${comando[1]} -y &>/dev/null
        touch $HOME/fim
    ) &>/dev/null &
    tput civis
    echo -ne "  \033[1;37mAGUARDE \033[1;37m- \033[1;37m["
    while true; do
        for((i=0; i<18; i++)); do
            echo -ne "\033[1;31m#"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm $HOME/fim && break
        echo -e "\033[1;37m]"
        tput cuu1
        tput dl1
        echo -ne "  \033[1;37mAGUARDE \033[1;37m- \033[1;37m["
    done
    echo -e "\033[1;37m]\033[1;37m -\033[1;32m OK!\033[1;37m"
    tput cnorm
}

# Função para verificar a chave
function verif_key() {
    krm=$(echo '5:q-3gs2.o7%8:1' | rev)
    chmod +x $_Ink/list &>/dev/null
    if [[ ! -e "$_Ink/list" ]]; then
        echo -e "\n\033[1;31mCHAVE INVÁLIDA!\033[0m"
        rm -rf $HOME/Plus &>/dev/null
        tput reset
        exit 1
    fi
}

# Exibir o banner inicial
tput reset
echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
echo -e "\033[0;34m┃\E[41;1;37m             ⇱ SCRIPT SSHPLUS PRO ⇲              \E[0m\033[0;34m┃"
echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
echo ""
echo -e "             \033[1;31mATENÇÃO! \033[1;37mESTE SCRIPT IRÁ!\033[0m"
echo ""
echo -e "\033[1;31m• \033[1;37mINSTALAR UM CONJUNTO DE SCRIPTS COMO FERRAMENTAS\033[0m"
echo -e "\033[1;37m  PARA GERENCIAMENTO DE REDE, SISTEMA E USUÁRIOS\033[0m"
echo ""
echo -e "\033[1;32m• \033[1;32mDICA! \033[1;37mUSE O TEMA ESCURO EM SEU TERMINAL PARA\033[0m"
echo -e "\033[1;37m  UMA MELHOR EXPERIÊNCIA E VISUALIZAÇÃO!\033[0m"
echo ""
echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
echo -e "\033[0;34m┃\033[1;37m               by:@TURBONET2023                  \E[0m\033[0;34m┃"
echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
echo ""

# Verificar link e chave
echo -e "\n\033[1;36mVERIFICANDO LINK... \033[0m"
rm $_Ink/list &>/dev/null
wget -P $_Ink https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/list &>/dev/null
verif_key
sleep 3s
echo "/bin/menu" >/bin/h
chmod +x /bin/h &>/dev/null
rm versao* &>/dev/null
wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/versao &>/dev/null
rm v2raymanager &>/dev/null
wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Modulos/v2raymanager &>/dev/null
wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Modulos/botteste.sh &>/dev/null
chmod 777 v2raymanager &>/dev/null
chmod 777 botteste.sh &>/dev/null
mkdir $HOME/BOT &>/dev/null
cd $HOME/BOT
wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Modulos/ShellBot.sh &>/dev/null
chmod 777 ShellBot.sh &>/dev/null
cd &>/dev/null

# Verificar se existe um banco de dados de usuários
if [[ -f "$HOME/usuarios.db" ]]; then
    tput reset
    echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
    echo -e "\033[0;34m┃                   \033[1;37m• \033[1;31mATENÇÃO \033[1;37m•                   \033[0;34m┃"
    echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
    echo -e "\033[0;34m┃\033[1;37mUM BANCO DE DADOS DE USUÁRIOS \033[1;32m(usuarios.db) \033[1;37mFOI ENCONTRADO!  \033[0;34m┃"
    echo -e "\033[0;34m┃\033[1;37mVOCÊ DESEJA MANTÊ-LO, PRESERVANDO O LIMITE DE     \033[0;34m┃"
    echo -e "\033[0;34m┃\033[1;37mCONEXÕES SIMULTÂNEAS DOS USUÁRIOS? OU             \033[0;34m┃"
    echo -e "\033[0;34m┃\033[1;37mCRIAR UM NOVO BANCO DE DADOS?                    \033[0;34m┃"
    echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
    echo -e "\033[0;34m┃\033[1;37m[\033[1;31m1\033[1;37m] \033[1;37mMANTER BANCO DE DADOS ATUAL                \033[0;34m┃"
    echo -e "\033[0;34m┃\033[1;37m[\033[1;31m2\033[1;37m] \033[1;37mCRIAR NOVO BANCO DE DADOS                  \033[0;34m┃"
    echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
    echo ""
    tput setaf 2
    tput bold
    read -p "Opção ?: " -e -i 1 optiondb
    tput sgr0
else
    awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > $HOME/usuarios.db
fi

if [[ "$optiondb" == '2' ]]; then
    awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > $HOME/usuarios.db
fi

# Atualizar o sistema
tput reset
tput setaf 7
tput setab 4
tput bold
printf '%35s%s%-20s\n' "ATUALIZANDO SISTEMA"
tput sgr0
echo ""
fun_bar 'apt-get update -y'
fun_bar 'apt-get upgrade -y'
echo ""
echo -e "          \033[1;37m[\033[1;31m!\033[1;37m] \033[1;32mINSTALANDO PACOTES \033[1;37m[\033[1;31m!\033[1;37m]"
echo ""

# Instalar versões do Python e configurar
PYTHON_VERSIONS=(3.9 3.10 3.11)
for VERSION in "${PYTHON_VERSIONS[@]}"; do
    sudo apt-get install -y python$VERSION python3-pip
    sudo apt-get install -y python$VERSION-dev python$VERSION-venv python$VERSION-distutils
    sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python$VERSION 1
    python$VERSION -m ensurepip
    python$VERSION -m pip install --upgrade pip setuptools
done

# Criar e ativar um ambiente virtual
python3 -m venv myenv
source myenv/bin/activate

# Instalar pacotes necessários
REQUIRED_PACKAGES=(
    bc screen nano unzip lsof net-tools dos2unix nload jq curl figlet firewalld
)
for PACKAGE in "${REQUIRED_PACKAGES[@]}"; do
    fun_bar "apt-get install $PACKAGE -y"
done

# Configurar regras do firewall
sudo systemctl enable firewalld
sudo systemctl start firewalld
sudo firewall-cmd --zone=public --add-port=80/tcp --permanent
sudo firewall-cmd --zone=public --add-port=443/tcp --permanent
sudo firewall-cmd --reload

# Mensagem de conclusão
clear
echo -e "\033[1;32m Instalação Concluída!\033[0m"
echo -e "\033[1;37m Você pode precisar reiniciar o sistema para que todas as mudanças tenham efeito.\033[0m"

# Personalizar mensagem de login
echo 'clear' >> ~/.bashrc
echo 'echo -e "\t\033[91mSERVIDOR \033[92mSSHPLUS\033[93m BY \033[91m@TURBONET2023\033[0m"' >> ~/.bashrc
echo 'echo -e "\033[92m"' >> ~/.bashrc
echo 'echo -e "\t\033[93mSCRIPT PREMIUM\033[92m"' >> ~/.bashrc
echo 'echo -e "\tPARA SISTEMAS LINUX BASEADOS EM DEBIAN!"' >> ~/.bashrc
echo 'echo -e "\t\033[93m~ \033[92mCódigo mantido por TURBONET2023\033[0m"' >> ~/.bashrc
