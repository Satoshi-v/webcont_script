#!/bin/bash

clear

# Função para instalar pacotes
install_packages() {
    echo "Instalando pacotes necessários..."
    apt-get update &>/dev/null
    apt-get install -y lolcat figlet curl git boxes &>/dev/null

    if [[ $? -ne 0 ]]; then
        echo "Erro ao instalar pacotes. Verifique sua conexão de internet e tente novamente."
        exit 1
    fi
}

# Função para barra de progresso
fun_bar() {
    local comando1="$1"
    local comando2="$2"
    (
        [[ -e $HOME/fim ]] && rm $HOME/fim
        $comando1 -y > /dev/null 2>&1
        $comando2 -y > /dev/null 2>&1
        touch $HOME/fim
    ) > /dev/null 2>&1 &
    tput civis
    echo -ne "  \033[1;37mAGUARDE \033[1;37m- \033[1;37m["
    while true; do
        for ((i = 0; i < 18; i++)); do
            echo -ne "\033[1;31m#"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm $HOME/fim && break
        echo -e "\033[1;37m]"
        tput cuu1
        tput dl1
        echo -ne "  \033[1;37mAGUARDE \033[1;37m- \033[1;37m["
    done
    echo -e "\033[1;37m]\033[1;37m -\033[1;32m OK !\033[1;37m"
    tput cnorm
}

# Verificação de permissão root
if [[ "$(whoami)" != "root" ]]; then
    echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- \033[1;33mVocê precisa executar como root\033[0m"
    exit 1
fi

# Instalar pacotes necessários
install_packages

# Variáveis para URLs
lnk=$(echo 'z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r' | sed -e 's/[^a-z.]//ig' | rev)
Ink=$(echo '/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×' | sed -e 's/[^a-z/]//ig')
ink=$(echo '/3×u3#s×87r/83×l2×4×i0b×' | sed -e 's/[^a-z/]//ig')

# Exemplo de uso da função fun_bar (substitua com comandos reais)
# fun_bar "comando1" "comando2"
#-----------------------------------------------------------------------------------------------------------------
function verif_key () {
krm=$(echo '5:q-3gs2.o7%8:1'|rev); chmod +x $_Ink/list > /dev/null 2>&1
[[ ! -e "$_Ink/list" ]] && {
echo -e "\n\033[1;31mKEY INVÁLIDA!\033[0m"
rm -rf $HOME/Plus > /dev/null 2>&1
tput reset; exit 1
}
}
tput reset
echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
echo -e "\033[0;34m┃\E[41;1;37m             ⇱ SCRIPT SSHPLUS PRO ⇲              \E[0m\033[0;34m┃"
echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
echo ""          
echo -e "             \033[1;31mATENCAO! \033[1;37mESSE SCRIPT IRA !\033[0m"
echo ""
echo -e "\033[1;31m• \033[1;37mINSTALAR UM CONJUNTO DE SCRIPTS COMO FERRAMENTAS\033[0m"
echo -e "\033[1;37m  PARA O GERENCIAMENTO DE REDE, SISTEMA E USUARIOS\033[0m"
echo ""
echo -e "\033[1;32m• \033[1;32mDICA! \033[1;37mULTILIZE O TEMA DARK EM SEU TERMINAL PARA\033[0m"
echo -e "\033[1;37m  UMA MELHOR EXPERIÊNCIA E VISUALIZACAO DO MESMO!\033[0m"
echo ""   
echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
echo -e "\033[0;34m┃\033[1;37m               by:@TURBONET2023                  \E[0m\033[0;34m┃"
echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"           
echo ""
#-----------------------------------------------------------------------------------------------------------------
echo -e "\n\033[1;36mVERIFICANDO LINK... \033[0m"

# Remove o arquivo list se existir
rm -f "$_Ink/list" >/dev/null 2>&1

# Baixa o arquivo list
if wget -P "$_Ink" https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/list >/dev/null 2>&1; then
    echo "Arquivo list baixado com sucesso."
else
    echo "Falha ao baixar o arquivo list."
fi

# Verifica a chave (função verif_key deve estar definida anteriormente no script)
verif_key

# Pausa por 3 segundos
sleep 3s

# Cria o arquivo /bin/h com o conteúdo "/bin/menu" e define permissões de execução
echo "/bin/menu" > /bin/h
chmod +x /bin/h >/dev/null 2>&1

# Remove o arquivo versao* se existir
rm -f versao* >/dev/null 2>&1

# Baixa o arquivo versao
if wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/versao >/dev/null 2>&1; then
    echo "Arquivo versao baixado com sucesso."
else
    echo "Falha ao baixar o arquivo versao."
fi

# Remove o arquivo v2raymanager se existir
rm -f v2raymanager >/dev/null 2>&1

# Baixa o arquivo v2raymanager
if wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Modulos/v2raymanager >/dev/null 2>&1; then
    echo "Arquivo v2raymanager baixado com sucesso."
else
    echo "Falha ao baixar o arquivo v2raymanager."
fi

# Baixa o arquivo botteste.sh
if wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Modulos/botteste.sh >/dev/null 2>&1; then
    echo "Arquivo botteste.sh baixado com sucesso."
else
    echo "Falha ao baixar o arquivo botteste.sh."
fi

# Define permissões de execução para os arquivos baixados
chmod 777 v2raymanager botteste.sh >/dev/null 2>&1

# Cria o diretório $HOME/BOT se não existir
mkdir -p "$HOME/BOT" >/dev/null 2>&1

# Entra no diretório $HOME/BOT
cd "$HOME/BOT"

# Baixa o arquivo ShellBot.sh
if wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Modulos/ShellBot.sh >/dev/null 2>&1; then
    echo "Arquivo ShellBot.sh baixado com sucesso."
else
    echo "Falha ao baixar o arquivo ShellBot.sh."
fi

# Define permissões de execução para o ShellBot.sh
chmod 777 ShellBot.sh >/dev/null 2>&1

# Retorna ao diretório anterior
cd - >/dev/null 2>&1
#-----------------------------------------------------------------------------------------------------------------
echo ""
[[ -f "$HOME/usuarios.db" ]] && {
    tput reset
    echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
    echo -e "\033[0;34m┃                   \033[1;37m• \033[1;31mATENCAO \033[1;37m•                   \033[0;34m┃"
    echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
    echo -e "\033[0;34m┃\033[1;37mUMA BASE DE DADOS DE USUÁRIO \033[1;32m(usuarios.db) \033[1;37mFoi   \033[0;34m┃" 
    echo -e "\033[0;34m┃\033[1;37mENCONTRADA! DESEJA MANTE-LA PRESERVANDO O LIMITE \033[0;34m┃"
    echo -e "\033[0;34m┃\033[1;37mDE CONEXÕES SIMULTÂNEAS DE USUARIOS? OU DESEJA   \033[0;34m┃"
    echo -e "\033[0;34m┃\033[1;37mCRIAR UMA NOVA BASE ?                            \033[0;34m┃"
    echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
    echo -e "\033[0;34m┃\033[1;37m[\033[1;31m1\033[1;37m] \033[1;37mMANTER BASE DE DADOS ATUAIS                  \033[0;34m┃"
    echo -e "\033[0;34m┃\033[1;37m[\033[1;31m2\033[1;37m] \033[1;37mCRIAR UMA NOVA BASE DE DADOS                 \033[0;34m┃"
    echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
    echo ""
    tput setaf 2 ; tput bold ; read -p "Opção ?: " -e -i 1 optiondb ; tput sgr0

    [[ "$optiondb" = '2' ]] && awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > $HOME/usuarios.db
} || {
    awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > $HOME/usuarios.db
}
#-----------------------------------------------------------------------------------------------------------------
# Redefine o terminal e define as cores
tput reset
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%35s%s%-18s\n' " AGUARDE A INSTALAÇÃO" ; tput sgr0
echo ""
echo -e "          \033[1;37m[\033[1;31m!\033[1;37m] \033[1;32mATUALIZANDO SISTEMA \033[1;37m[\033[1;31m!\033[1;37m]\033[0m"
echo ""
echo -e "    \033[1;37mAS ATUALIZAÇÕES PODEM DEMORAR UM POUCO!\033[0m"
echo ""

# Função para atualizar o sistema e criar um diretório e arquivo
fun_attlist () {
    apt-get update -y
    [[ ! -d /usr/share/.plus ]] && mkdir /usr/share/.plus
    echo "crz: $(date)" > /usr/share/.plus/.plus
}

# Função para exibir uma barra de progresso (substitua pela sua implementação)
fun_bar () {
    # Adicione sua implementação de barra de progresso aqui
    # Exemplo: pausa para fins de demonstração
    echo -ne '[#####                    ] (25%)\r'
    sleep 1
    echo -ne '[##########               ] (50%)\r'
    sleep 1
    echo -ne '[###############          ] (75%)\r'
    sleep 1
    echo -ne '[#######################  ] (100%)\r'
    echo -ne '\n'
    $1
}

# Execute a função de atualização com uma barra de progresso
fun_bar 'fun_attlist'
#-----------------------------------------------------------------------------------------------------------------
# Resetar o terminal
tput reset
echo ""
echo -e "          \033[1;37m[\033[1;31m!\033[1;37m] \033[1;32mAGUARDE A INSTALAÇÃO \033[1;37m[\033[1;31m!\033[1;37m] \033[0m"
echo ""
echo -e "                \033[1;37mOTIMIZANDO PYTHON \033[0m"
echo ""
echo -e "            \033[1;37mCOSTUMA DEMORAR UM POUCO!\033[0m"
echo ""

otimize_python() {
    # Função para verificar e instalar pacotes
    install_package() {
        local package=$1
        if dpkg -l | grep -q "^ii  $package "; then
            echo -e " \033[1;32m$package já está instalado.\033[0m"
        else
            echo -e " \033[1;33mInstalando $package...\033[0m"
            apt-get install $package -y >/dev/null 2>&1
        fi
    }

    # INSTALA PYTHON E PIP
    sudo apt-get install_package python
    sudo apt-get install_package python2
    sudo apt-get install_package python3.6
    sudo apt-get install_package python3.7
    sudo apt-get install_package python3.8
    sudo apt-get install_package python3.9
    sudo apt-get install_package python3.10
    sudo apt-get install_package python3.11
    sudo apt-get install_package python-pip
    sudo apt-get install_package python3-pip
    sudo apt-get install_package socat

    # CRIA ALTERNATIVAS PYTHON
    echo -e " \033[1;33mConfigurando alternativas do Python...\033[0m"
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 3 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 4 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 5 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 6 >/dev/null 2>&1


    # SETAR PYTHON3
    echo -e " \033[1;33mDefinindo Python 3.9 como padrão...\033[0m"
    update-alternatives --set python3 /usr/bin/python3.9 >/dev/null 2>&1

    echo ""
    echo -e "                \033[1;32mOTIMIZAÇÃO CONCLUÍDA! \033[0m"
}

# Chama a função diretamente se não tiver a função fun_bar definida
otimize_python
#-----------------------------------------------------------------------------------------------------------------
# Resetar o terminal
tput reset

# Exibir mensagem de instalação
echo ""
echo -e "          \033[1;37m[\033[1;31m!\033[1;37m] \033[1;32mINSTALANDO PACOTES \033[1;37m[\033[1;31m!\033[1;37m] \033[0m"
echo ""
echo -e "\033[1;37mALGUNS PACOTES SÃO EXTREMAMENTE NECESSÁRIOS!\033[0m"
echo ""

# Função para instalar pacotes e configurar o firewall
inst_pct () {
    _pacotes=("bc" "screen" "nano" "unzip" "lsof" "netstat" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "python3" "python3-pip" "firewalld")
    for _prog in "${_pacotes[@]}"; do
        apt install -y $_prog
    done
    
    pip install speedtest-cli
    
    firewall-cmd --zone=public --permanent --add-port=80/tcp
    firewall-cmd --zone=public --permanent --add-port=8989/tcp
    firewall-cmd --zone=public --permanent --add-port=5454/tcp
    firewall-cmd --zone=public --permanent --add-port=8888/tcp
    firewall-cmd --zone=public --permanent --add-port=8080/tcp
    firewall-cmd --zone=public --permanent --add-port=7300/udp
    firewall-cmd --zone=public --permanent --add-port=443/tcp
    firewall-cmd --reload
}

# Executar a função de instalação com barra de progresso
fun_bar 'inst_pct'

# Configurar UFW se instalado
if [[ -f "/usr/sbin/ufw" ]]; then
    ufw allow 443/tcp
    ufw allow 80/tcp
    ufw allow 3128/tcp
    ufw allow 8799/tcp
    ufw allow 8080/tcp
fi
#-----------------------------------------------------------------------------------------------------------------
#Resetar Terminal
tput reset
echo -e "              \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mFINALIZANDO \033[1;33m[\033[1;31m!\033[1;33m] \033[0m"
echo ""
echo -e "      \033[1;37mCONCLUINDO FUNÇÕES E DEFINIÇÕES! \033[0m"
echo ""
fun_bar "$_Ink/list $_lnk $_Ink $_1nk $key"
#-----------------------------------------------------------------------------------------------------------------
#Resetar Terminal
tput reset
echo ""
cd $HOME
echo -e ""
echo -e "        \033[1;33m • \033[1;32mINSTALACAO CONCLUIDA\033[1;33m • \033[0m"
echo ""
cd $HOME
echo "clear" >>/root/.bashrc
echo 'DATE=$(date +"%d-%m-%y")' >>/root/.bashrc
echo 'TIME=$(date +"%T")' >>/root/.bashrc
echo 'figlet -k SSH-PLUS | lolcat' >>/root/.bashrc
echo 'echo -e " NOME DO SERVIDOR : $HOSTNAME"' >>/root/.bashrc
echo 'echo -e " SERVIDOR LIGADO À : $(uptime -p)"' >>/root/.bashrc
echo 'echo -e " DATA : $DATE"' >>/root/.bashrc
echo 'echo -e " HORA : $TIME"' >>/root/.bashrc
echo 'echo -e " (TELEGRAM)--@TURBONET2023"' >>/root/.bashrc
echo 'echo -e "\033[1;31m DIGITE ( menu ) PARA ENTRAR\033[0m."' >>/root/.bashrc
echo 'echo -e ""' >>/root/.bashrc
date=$(date '+%Y-%m-%d <> %H:%M:%S')
echo -e "\033[1;37m $system         $date"
figlet "SSH-PLUS" | lolcat
echo -e "\033[01;31m\033[1;31m\033[5;34;47m                INSTALACAO CONCLUIDA               \033[1;33m \033[0m\033[01;31m"
echo -e "\033[01;31m\033[1;33mPARA INICIAR DIGITE: \033[1;32mmenu\033[0m"
echo -e "\033[01;31m\033[1;33mMAIS INFORMACOES: \033[1;31m(\033[1;36mTELEGRAM\033[1;31m)--> \033[1;37m@TURBONET2023\033[0m"
rm $HOME/Plus && cat /dev/null > ~/.bash_history && history -c
