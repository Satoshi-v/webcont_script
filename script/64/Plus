#!/bin/bash

clear

# Função para instalação de pacotes
install_packages() {
    packages=("lolcat" "figlet" "curl" "git" "figlet" "boxes" "bc" "screen" "nano" "unzip" "lsof" "netstat" "net-tools" "dos2unix" "nload" "jq" "python3" "python-pip" "firewalld")
    for package in "${packages[@]}"; do
        if ! dpkg -l | grep -q "$package"; then
            apt-get install "$package" -y &>/dev/null
        fi
    done
    pip install speedtest-cli
    sudo firewall-cmd --zone=public --permanent --add-port=80/tcp
    sudo firewall-cmd --zone=public --permanent --add-port=8989/tcp
    sudo firewall-cmd --zone=public --permanent --add-port=5454/tcp
    sudo firewall-cmd --zone=public --permanent --add-port=8888/tcp
    sudo firewall-cmd --zone=public --permanent --add-port=8080/tcp
    sudo firewall-cmd --zone=public --permanent --add-port=7300/udp
    sudo firewall-cmd --zone=public --permanent --add-port=443/tcp
    sudo firewall-cmd --zone=public --permanent --add-port=8080/tcp
    sudo firewall-cmd --reload
}

# Função para verificar se o script está sendo executado como root
check_root() {
    if [[ "$(whoami)" != "root" ]]; then
        echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- \033[1;33mVocê precisa executar como root\033[0m"
        exit 1
    fi
}

# Função para exibir barra de progresso
fun_bar() {
    comando[0]="$1"
    comando[1]="$2"
    (
        [[ -e $HOME/fim ]] && rm $HOME/fim
        ${comando[0]} -y > /dev/null 2>&1
        ${comando[1]} -y > /dev/null 2>&1
        touch $HOME/fim
    ) > /dev/null 2>&1 &
    tput civis
    echo -ne "  \033[1;37mAGUARDE \033[1;37m- \033[1;37m["
    while true; do
        for ((i=0; i<18; i++)); do
            echo -ne "\033[1;31m#"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm $HOME/fim && break
        echo -e "\033[1;37m]"
        tput cuu1
        tput dl1
        echo -ne "  \033[1;37mAGUARDE \033[1;37m- \033[1;37m["
    done
    echo -e "\033[1;37m]\033[1;37m -\033[1;32m OK !\033[1;37m"
    tput cnorm
}

# Função para verificar chave
verif_key() {
    krm=$(echo '5:q-3gs2.o7%8:1'|rev)
    chmod +x $_Ink/list > /dev/null 2>&1
    if [[ ! -e "$_Ink/list" ]]; then
        echo -e "\n\033[1;31mKEY INVÁLIDA!\033[0m"
        rm -rf $HOME/Plus > /dev/null 2>&1
        tput reset
        exit 1
    fi
}

# Função para atualizar sistema
fun_attlist() {
    apt-get update -y
    [[ ! -d /usr/share/.plus ]] && mkdir /usr/share/.plus
    echo "crz: $(date)" > /usr/share/.plus/.plus
}

# Função para otimizar Python
otimize_python() {
    apt-get install python -y >/dev/null 2>&1
    apt-get install python2 -y >/dev/null 2>&1
    apt-get install python3.6 -y >/dev/null 2>&1
    apt-get install python3.7 -y >/dev/null 2>&1
    apt-get install python3.8 -y >/dev/null 2>&1
    apt-get install python3.9 -y >/dev/null 2>&1
    apt-get install python3.10 -y >/dev/null 2>&1
    apt-get install python3.11 -y >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 1 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 3 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 2 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 4 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 5 >/dev/null 2>&1
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 6 >/dev/null 2>&1
    apt install pip -y
    apt install python3-pip -y
    apt install socat -y
    update-alternatives --set python3 /usr/bin/python3.11
}

# Função para instalar pacotes necessários
inst_pct() {
    packages=("bc" "screen" "nano" "unzip" "lsof" "netstat" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "python3" "python-pip" "firewalld")
    for package in "${packages[@]}"; do
        apt install $package -y
    done
    pip install speedtest-cli
    sudo firewall-cmd --zone=public --permanent --add-port=80/tcp
    sudo firewall-cmd --zone=public --permanent --add-port=8989/tcp
    sudo firewall-cmd --zone=public --permanent --add-port=5454/tcp
    sudo firewall-cmd --zone=public --permanent --add-port=8888/tcp
    sudo firewall-cmd --zone=public --permanent --add-port=8080/tcp
    sudo firewall-cmd --zone=public --permanent --add-port=7300/udp
    sudo firewall-cmd --zone=public --permanent --add-port=443/tcp
    sudo firewall-cmd --zone=public --permanent --add-port=8080/tcp
    sudo firewall-cmd --reload
}

# Função principal
main() {
    check_root

    echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
    echo -e "\033[0;34m┃\E[41;1;37m             ⇱ SCRIPT SSHPLUS PRO ⇲              \E[0m\033[0;34m┃"
    echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
    echo ""
    echo -e "             \033[1;31mATENÇÃO! \033[1;37mESSE SCRIPT IRÁ INSTALAR!\033[0m"
    echo ""
    echo -e "\033[1;31m• \033[1;37mINSTALAR UM CONJUNTO DE SCRIPTS COMO FERRAMENTAS\033[0m"
    echo -e "\033[1;37m  PARA O GERENCIAMENTO DE REDE, SISTEMA E USUÁRIOS\033[0m"
    echo ""
    echo -e "\033[1;32m• \033[1;32mDICA! \033[1;37mUTILIZE O TEMA DARK EM SEU TERMINAL PARA\033[0m"
    echo -e "\033[1;37m  UMA MELHOR VISUALIZAÇÃO DO SCRIPT\033[0m"
    echo ""

    echo -ne "  \033[1;31mDESEJA PROSSEGUIR? [S/N]:\033[1;37m "
    read start
    if [[ "$start" = "S" || "$start" = "s" ]]; then
        fun_attlist
        install_packages
        fun_bar
        otimize_python
        inst_pct
        clear
        echo -e "\033[1;32m[ ✔ ] INSTALAÇÃO CONCLUÍDA!\033[0m"
        echo -ne "  \033[1;37mDigite 'menu' para iniciar:\033[0m "
        read menu_input
        if [[ "$menu_input" = "menu" ]]; then
            echo -e "\033[1;32mIniciando menu...\033[0m"
            # Chamar a função ou script que inicia o menu aqui
            # Exemplo: ./menu.sh
        else
            echo -e "\033[1;31mComando inválido!\033[0m"
        fi
    else
        echo -e "\033[1;31mInstalação abortada!\033[0m"
        exit 1
    fi
}

main
