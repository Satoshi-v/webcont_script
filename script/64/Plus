#!/bin/bash
clear
sudo apt-get install lolcat -y &>/dev/null 2>&1
sudo apt-get install figlet -y &>/dev/null 2>&1
sudo apt-get install curl -y &>/dev/null 2>&1
sudo apt-get install git -y &>/dev/null 2>&1
sudo apt-get install figlet boxes -y &>/dev/null 2>&1
cd $HOME
[[ "$(whoami)" != "root" ]] && {
    echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- \033[1;33mVOCÊ PRECISA EXECUTAR A INSTALAÇÃO DO SCRIPT COMO USUÁRIO ROOT\033[0m"
    rm $HOME/Plus >/dev/null 2>&1
    exit 0
}
_lnk=$(echo "z1:y#x.5s0ul&p4hs$s.0a72d*n-e!v89e032:3r" | sed -e "s/[^a-z.]//ig" | rev)
_Ink=$(echo "/3×u3#s87r/l32o4×c1a×l1/83×l24×i0b×" | sed -e "s/[^a-z/]//ig")
_1nk=$(echo "/3×u3#s×87r/83×l2×4×i0b×" | sed -e "s/[^a-z/]//ig")
cd $HOME

fun_bar () {
    comando[0]="$1"
    comando[1]="$2"
    (
        [[ -e $HOME/fim ]] && rm $HOME/fim
        ${comando[0]} -y > /dev/null 2>&1
        ${comando[1]} -y > /dev/null 2>&1
        touch $HOME/fim
    ) > /dev/null 2>&1 &
    
    tput civis
    echo -ne "  \033[1;37mAGUARDE \033[1;37m- \033[1;37m["
    while true; do
        for ((i=0; i<18; i++)); do
            echo -ne "\033[1;31m#"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm $HOME/fim && break
        echo -e "\033[1;37m]"
        tput cuu1
        tput dl1
        echo -ne "  \033[1;37mAGUARDE \033[1;37m- \033[1;37m["
    done
    echo -e "\033[1;37m]\033[1;37m -\033[1;32m OK !\033[1;37m"
    tput cnorm
}
#-----------------------------------------------------------------------------------------------------------------
function verif_key () {
krm=$(echo "5:q-3gs2.o7%8:1"|rev); chmod +x $_Ink/list > /dev/null 2>&1
[[ ! -e "$_Ink/list" ]] && {
echo -e "\n\033[1;31mKEY INVÁLIDA!\033[0m"
rm -rf $HOME/Plus > /dev/null 2>&1
tput reset; exit 1
}
}
tput reset
echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
echo -e "\033[0;34m┃\E[41;1;37m               ⇱ SCRIPT SSHPLUS PRO ⇲             \E[0m\033[0;34m┃"
echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
echo -e "\033[0;34m┃                                                  \033[0;34m┃"  
echo -e "\033[0;34m┃     \033[1;31mATENCAO! \033[1;37mESSE SCRIPT IRA !                   \033[0;34m┃"
echo -e "\033[0;34m┃                                                  \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;32m• \033[1;37mINSTALAR UM CONJUNTO DE SCRIPTS COMO FERRAMENTAS\033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37m  PARA O GERENCIAMENTO DE REDE, SISTEMA E USUARIOS\033[0;34m┃"
echo -e "\033[0;34m┃                                                  \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;32m• \033[1;32mDICA! \033[1;37mULTILIZE O TEMA DARK EM SEU TERMINAL PARA \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37m  UMA MELHOR EXPERIÊNCIA E VISUALIZACAO DO MESMO! \033[0;34m┃"
echo -e "\033[0;34m┃                                                  \033[0;34m┃"
echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
echo -e "\033[0;34m┃\033[1;37m               by:@TURBONET2023                   \E[0m\033[0;34m┃"
echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"           
echo ""
#-----------------------------------------------------------------------------------------------------------------
echo -e "\n\033[1;36mVERIFICANDO LINK... \033[0m" ; 
    rm $_Ink/list > /dev/null 2>&1; 
    wget -P $_Ink https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/list >/dev/null 2>&1
    verif_key
    sleep 3s
    echo "/bin/menu" >/bin/h && chmod +x /bin/h >/dev/null 2>&1
    rm versao* >/dev/null 2>&1
    wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/versao >/dev/null 2>&1
    rm v2raymanager >/dev/null 2>&1
    wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Modulos/v2raymanager >/dev/null 2>&1
    wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Modulos/botteste.sh >/dev/null 2>&1
    chmod 777 v2raymanager >/dev/null 2>&1
    chmod 777 botteste.sh >/dev/null 2>&1
    mkdir $HOME/BOT >/dev/null 2>&1
    cd $HOME/BOT
    wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Modulos/ShellBot.sh >/dev/null 2>&1
    chmod 777 ShellBot.sh >/dev/null 2>&1
    cd >/dev/null 2>&1
#-----------------------------------------------------------------------------------------------------------------
echo ""
[[ -f "$HOME/usuarios.db" ]] && {
tput reset
echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
echo -e "\033[0;34m┃                   \033[1;37m• \033[1;31mATENCAO \033[1;37m•                   \033[0;34m┃"
echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
echo -e "\033[0;34m┃\033[1;37mUMA BASE DE DADOS DE USUÁRIO \033[1;32m(usuarios.db) \033[1;37mFoi   \033[0;34m┃" 
echo -e "\033[0;34m┃\033[1;37mENCONTRADA! DESEJA MANTE-LA PRESERVANDO O LIMITE \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37mDE CONEXÕES SIMULTÂNEAS DE USUARIOS? OU DESEJA   \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37mCRIAR UMA NOVA BASE ?                            \033[0;34m┃"
echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
echo -e "\033[0;34m┃\033[1;37m[\033[1;31m1\033[1;37m] \033[1;37mMANTER BASE DE DADOS ATUAIS                  \033[0;34m┃"
echo -e "\033[0;34m┃\033[1;37m[\033[1;31m2\033[1;37m] \033[1;37mCRIAR UMA NOVA BASE DE DADOS                 \033[0;34m┃"
echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
echo ""
tput setaf 2 ; tput bold ; read -p "Opção ?: " -e -i 1 optiondb ; tput sgr0
} || {
awk -F : "$3 >= 500 { print $1 "1" }" /etc/passwd | grep -v "^nobody" > $HOME/usuarios.db
}
[[ "$optiondb" = "2" ]] && awk -F : "$3 >= 500 { print $1 " 1" }" /etc/passwd | grep -v "^nobody" > $HOME/usuarios.db
#-----------------------------------------------------------------------------------------------------------------
# Redefinir a exibição do terminal
tput reset

# Definir cores e exibir mensagem de espera
tput setaf 7 ; tput setab 4 ; tput bold ; printf '%35s%s%-18s\n' " AGUARDE A INSTALAÇÃO" ; tput sgr0
echo ""

# Exibir a mensagem de atualização do sistema
echo -e "          \033[1;37m[\033[1;31m!\033[1;37m] \033[1;32mATUALIZANDO SISTEMA \033[1;37m[\033[1;31m!\033[1;37m]\033[0m"
echo ""
echo -e "    \033[1;37mATUALIZAÇÕES COSTUMAM DEMORAR UM POUCO!\033[0m"
echo ""

# Definir a função de atualização do sistema
fun_attlist () {
    apt-get update -y
    [[ ! -d /usr/share/.plus ]] && mkdir /usr/share/.plus
    echo "crz: $(date)" > /usr/share/.plus/.plus
}

# Executar a função de atualização do sistema com barra de progresso
fun_bar "fun_attlist"
#-----------------------------------------------------------------------------------------------------------------
# Redefinir a exibição do terminal
tput reset
echo ""
echo -e "          \033[1;37m[\033[1;31m!\033[1;37m] \033[1;32mAGUARDE A INSTALAÇÃO \033[1;37m[\033[1;31m!\033[1;37m] \033[0m"
echo ""
echo -e "                \033[1;37mINSTALANDO PYTHON \033[0m"
echo ""
echo -e "            \033[1;37mCOSTUMA DEMORAR UM POUCO!\033[0m"
echo ""

otimize_python() {
    # INSTALA PYTHON2
    sudo apt-get install python -y >/dev/null 2>&1
    sudo apt-get install python2 -y >/dev/null 2>&1
    
    # INSTALA PYTHON3.7, PYTHON3.8, PYTHON3.9
    sudo apt-get install python3.7 -y >/dev/null 2>&1
    sudo apt-get install python3.8 -y >/dev/null 2>&1
    sudo apt-get install python3.9 -y >/dev/null 2>&1
    
    # CRIA ALTERNATIVAS PARA PYTHON3
    sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 1 >/dev/null 2>&1
    sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 2 >/dev/null 2>&1
    sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 3 >/dev/null 2>&1
    
    # INSTALA PIP PARA PYTHON2 E PYTHON3
    sudo apt-get install python-pip -y >/dev/null 2>&1
    sudo apt-get install python3-pip -y >/dev/null 2>&1
    
    # INSTALA SOCAT
    sudo apt-get install socat -y >/dev/null 2>&1
    
    # SETAR VERSÃO PADRÃO DO PYTHON3
    sudo update-alternatives --set python3 /usr/bin/python3.8 >/dev/null 2>&1
}

fun_bar "otimize_python"
#-----------------------------------------------------------------------------------------------------------------
# Função para redefinir a exibição do terminal e exibir o cabeçalho de instalação
reset_terminal() {
  tput reset
  echo ""
  echo -e "          \033[1;37m[\033[1;31m!\033[1;37m] \033[1;32mINSTALANDO PACOTES \033[1;37m[\033[1;31m!\033[1;37m]\033[0m"
  echo ""
  echo -e "\033[1;37mALGUNS PACOTES SÃO EXTREMAMENTE NECESSÁRIOS!\033[0m"
  echo ""
}

# Função para instalar um pacote com barra de progresso
install_package() {
  local package=$1
  echo -e "\033[1;36mINSTALANDO: $package\033[0m"
  sudo apt-get install -y $package | pv -W > /dev/null
  if [ $? -eq 0 ]; then
    echo -e "\033[1;32m$package instalado com sucesso\033[0m"
  else
    echo -e "\033[1;31mFalha ao instalar $package\033[0m"
  fi
}

# Função para instalar pacotes usando a função install_package
install_packages() {
  local packages=("lsof" "fail2ban" "htop" "nload" "apache2" "zip")
  for package in "${packages[@]}"; do
    install_package $package
  done
}

# Função para instalar pacotes e configurar o firewall
inst_pct() {
  local _pacotes=("bc" "screen" "nano" "unzip" "lsof" "netstat" "net-tools" "dos2unix" "nload" "jq" "curl" "figlet" "python3" "python-pip" "firewalld")
  for _prog in "${_pacotes[@]}"; do
    install_package $_prog
  done

  pip install speedtest-cli | pv -W > /dev/null
  echo -e "\033[1;32mspeedtest-cli instalado com sucesso\033[0m"

  local ports=("80/tcp" "8989/tcp" "5454/tcp" "8888/tcp" "8080/tcp" "7300/udp" "443/tcp")
  for port in "${ports[@]}"; do
    sudo firewall-cmd --zone=public --permanent --add-port=$port
  done
  sudo firewall-cmd --reload
}

# Configurar firewall com UFW, se disponível
config_ufw() {
  if [[ -f "/usr/sbin/ufw" ]]; then
    local ports=("443/tcp" "80/tcp" "3128/tcp" "8799/tcp" "8080/tcp")
    for port in "${ports[@]}"; do
      ufw allow $port
    done
  fi
}

# Instalar pv antes de qualquer outra coisa
echo -e "\033[1;36mINSTALANDO: pv\033[0m"
sudo apt-get install -y pv > /dev/null
if [ $? -eq 0 ]; then
  echo -e "\033[1;32mpv instalado com sucesso\033[0m"
else
  echo -e "\033[1;31mFalha ao instalar pv\033[0m"
  exit 1
fi

# Redefinir a exibição do terminal inicial
reset_terminal

# Instalar pacotes de rede iniciais
install_packages

# Redefinir a exibição do terminal novamente após a instalação inicial
reset_terminal

# Executar a função de instalação completa
inst_pct

# Configurar o UFW, se disponível
config_ufw

# Mensagem de conclusão
echo -e "\033[1;32mInstalação e configuração concluídas!\033[0m"
#-----------------------------------------------------------------------------------------------------------------
# Redefinir a exibição do terminal
tput reset

# Exibir a mensagem de finalização
echo -e "              \033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mFINALIZANDO \033[1;33m[\033[1;31m!\033[1;33m] \033[0m"
echo ""
echo -e "      \033[1;37mCONCLUINDO FUNÇÕES E DEFINIÇÕES! \033[0m"
echo ""

# Executar a função fun_bar com argumentos
fun_bar "$_Ink/list $_lnk $_Ink $_1nk $key"
#-----------------------------------------------------------------------------------------------------------------
# Redefinir a exibição do terminal
tput reset
echo ""
cd $HOME
echo ""
echo -e "        \033[1;33m • \033[1;32mINSTALAÇÃO CONCLUÍDA\033[1;33m • \033[0m"
echo ""

# Adicionar comandos ao .bashrc para exibição ao iniciar o terminal como root
{
    echo "clear"
    echo 'DATE=$(date +"%d-%m-%y")'
    echo 'TIME=$(date +"%T")'
    echo 'figlet -k SSH-PLUS | lolcat'
    echo 'echo -e " NOME DO SERVIDOR : $HOSTNAME"'
    echo 'echo -e " SERVIDOR LIGADO À : $(uptime -p)"'
    echo 'echo -e " DATA : $DATE"'
    echo 'echo -e " HORA : $TIME"'
    echo 'echo -e " (TELEGRAM)--@TURBONET2023"'
    echo 'echo -e "\033[1;31m DIGITE ( menu ) PARA ENTRAR\033[0m."'
    echo 'echo -e ""'
} >> /root/.bashrc

# Exibir data e hora atual, nome do sistema, e mensagem de instalação concluída
date=$(date "+%Y-%m-%d <> %H:%M:%S")
echo -e "\033[1;37m $system         $date"
figlet "SSH-PLUS" | lolcat
echo -e "\033[01;31m\033[1;31m\033[5;34;47m                INSTALAÇÃO CONCLUÍDA               \033[1;33m \033[0m\033[01;31m"
echo -e "\033[01;31m\033[1;33mPARA INICIAR DIGITE: \033[1;32mmenu\033[0m"
echo -e "\033[01;31m\033[1;33mMAIS INFORMAÇÕES: \033[1;31m(\033[1;36mTELEGRAM\033[1;31m)--> \033[1;37m@TURBONET2023\033[0m"

# Define a função para exibir mensagens coloridas
color_text() {
  echo -e "\033[$1m$2\033[0m"
}

# Loop até receber uma resposta válida
while true; do
  echo
  # Mensagem em amarelo e negrito
  color_text "1;33" "VOCÊ DESEJA REINICIAR O SERVIDOR AGORA? (s/n): "
  read -n 1 -r REPLY
  echo    # (opcional) move para a nova linha

  # Verifica a resposta
  if [[ $REPLY =~ ^[Ss]$ ]]; then
    color_text "1;32" "\nReiniciando o servidor..."
    sudo reboot
    break
  elif [[ $REPLY =~ ^[Nn]$ ]]; then
    color_text "1;31" "\nVocê optou por não reiniciar o servidor."
    break
  else
    color_text "1;31" "\nEntrada inválida. Por favor, responda com 's' ou 'n'."
  fi
done

# Remover o diretório Plus do HOME e limpar o histórico do bash
rm -rf $HOME/Plus
cat /dev/null > ~/.bash_history
history -c
