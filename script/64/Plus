#!/bin/bash
clear

# Função para instalar pacotes silenciosamente
install_pkg() {
  apt-get install "$1" -y &>/dev/null
}

# Instalando pacotes necessários
install_pkg lolcat
install_pkg figlet
install_pkg curl
install_pkg git
install_pkg boxes

# Verificando se o usuário é root
if [[ "$(whoami)" != "root" ]]; then
  echo -e "\033[1;33m[\033[1;31mErro\033[1;33m] \033[1;37m- \033[1;33mVocê precisa executar como root\033[0m"
  rm -f "$HOME/Plus"
  exit 1
fi

# Função para exibir barra de progresso
fun_bar() {
  comando1="$1"
  comando2="$2"
  nome="$3"

  (
    [[ -e "$HOME/fim" ]] && rm "$HOME/fim"
    $comando1 -y &>/dev/null
    $comando2 -y &>/dev/null
    touch "$HOME/fim"
  ) &>/dev/null &

  tput civis
  echo -ne "  \033[1;37m$nome \033[1;37m- \033[1;37m["

  while true; do
    for ((i=0; i<18; i++)); do
      echo -ne "\033[1;31m#"
      sleep 0.1s
    done
    [[ -e "$HOME/fim" ]] && rm "$HOME/fim" && break
    echo -e "\033[1;37m]"
    tput cuu1
    tput dl1
    echo -ne "  \033[1;37m$nome \033[1;37m- \033[1;37m["
  done

  echo -e "\033[1;37m]\033[1;37m -\033[1;32m OK !\033[1;37m"
  tput cnorm
}

# Função para verificar chave
verif_key() {
  krm=$(echo '5:q-3gs2.o7%8:1' | rev)
  chmod +x "$_Ink/list" &>/dev/null
  if [[ ! -e "$_Ink/list" ]]; then
    echo -e "\n\033[1;31mKEY INVÁLIDA!\033[0m"
    rm -rf "$HOME/Plus"
    tput reset
    exit 1
  fi
}

# Função para atualizar a lista
fun_attlist() {
  wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/list &>/dev/null
  chmod +x list
  ./list &>/dev/null
  rm -rf list
}

# Função para otimizar e instalar Python
otimize_python() {
  apt-get install python3.8 python3.9 python3.10 -y
  update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1
  update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 2
  update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 3
  pip3 install requests
}

# Função para instalar pacotes adicionais
inst_pct() {
  apt-get install apache2 bc screen nano unzip ufw lsof figlet python python3 curl less npm jq -y
}

# Exibindo informações iniciais
tput reset
echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
echo -e "\033[0;34m┃\E[41;1;37m             ⇱ SCRIPT SSHPLUS PRO ⇲              \E[0m\033[0;34m┃"
echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
echo ""
echo -e "             \033[1;31mATENÇÃO! \033[1;37mESSE SCRIPT IRÁ !\033[0m"
echo ""
echo -e "\033[1;31m• \033[1;37mINSTALAR UM CONJUNTO DE SCRIPTS COMO FERRAMENTAS\033[0m"
echo -e "\033[1;37m  PARA O GERENCIAMENTO DE REDE, SISTEMA E USUÁRIOS\033[0m"
echo ""
echo -e "\033[1;32m• \033[1;32mDICA! \033[1;37mUTILIZE O TEMA DARK EM SEU TERMINAL PARA\033[0m"
echo -e "\033[1;37m  UMA MELHOR EXPERIÊNCIA E VISUALIZAÇÃO DO MESMO!\033[0m"
echo ""
echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
echo -e "\033[0;34m┃\033[1;37m               by:@TURBONET2023                  \E[0m\033[0;34m┃"
echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
echo ""

# Verificando o link
echo -e "\n\033[1;36mVERIFICANDO LINK... \033[0m"
rm -f "$_Ink/list"
wget -P "$_Ink" https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/list &>/dev/null
verif_key
sleep 3s

# Configurando ambiente
echo "/bin/menu" >/bin/h && chmod +x /bin/h &>/dev/null
rm -f versao* v2raymanager
wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Install/versao &>/dev/null
wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Modulos/v2raymanager &>/dev/null
wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Modulos/botteste.sh &>/dev/null
chmod 777 v2raymanager botteste.sh
mkdir -p "$HOME/BOT"
cd "$HOME/BOT"
wget https://raw.githubusercontent.com/PhoenixxZ2023/PLUS/main/Modulos/ShellBot.sh &>/dev/null
chmod 777 ShellBot.sh
cd "$HOME"

# Verificando base de dados de usuários
if [[ -f "$HOME/usuarios.db" ]]; then
  tput reset
  echo -e "\033[0;34m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
  echo -e "\033[0;34m┃                   \033[1;37m• \033[1;31mATENÇÃO \033[1;37m•                   \033[0;34m┃"
  echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
  echo -e "\033[0;34m┃\033[1;37mUMA BASE DE DADOS DE USUÁRIO \033[1;32m(usuarios.db) \033[1;37mFoi   \033[0;34m┃" 
  echo -e "\033[0;34m┃\033[1;37mENCONTRADA! DESEJA MANTE-LA PRESERVANDO O LIMITE \033[0;34m┃"
  echo -e "\033[0;34m┃\033[1;37mDE CONEXÕES SIMULTÂNEAS DE USUÁRIOS? OU DESEJA   \033[0;34m┃"
  echo -e "\033[0;34m┃\033[1;37mCRIAR UMA NOVA BASE?                            \033[0;34m┃"
  echo -e "\033[0;34m┠━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┨\033[0m"
  echo -e "\033[0;34m┃\033[1;37m[\033[1;31m1\033[1;37m] \033[1;37mMANTER BASE DE DADOS ATUAIS                  \033[0;34m┃"
  echo -e "\033[0;34m┃\033[1;37m[\033[1;31m2\033[1;37m] \033[1;37mCRIAR UMA NOVA BASE DE DADOS                 \033[0;34m┃"
  echo -e "\033[0;34m┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
  echo ""
  tput setaf 2 ; tput bold ; read -p "Opção ?: " -e -i 1 optiondb ; tput sgr0
else
  awk -F : '$3 >= 500 { print $1 " 1" }' /etc/passwd | grep -v '^nobody' > "$HOME/usuarios.db"
fi

# Atualizando lista
fun_bar fun_attlist "Atualizando lista"

# Instalando e otimizando Python
fun_bar otimize_python "Instalando e Otimizando Python"

# Instalando pacotes adicionais
fun_bar inst_pct "Instalando pacotes adicionais"

# Instalando pacotes de rede
echo -e "\033[1;36mINSTALANDO PACOTES DE REDE \033[0m"
fun_bar 'apt-get install lsof -y' 'apt-get install fail2ban -y'
fun_bar 'apt-get install htop -y' 'apt-get install nload -y'
fun_bar 'apt-get install apache2 -y' 'apt-get install zip -y'

# Instalando e configurando firewalls
apt-get install ufw -y &>/dev/null
apt-get install firewalld -y &>/dev/null

# Instalando outros pacotes
echo -e "\033[1;36mINSTALANDO OUTROS PACOTES \033[0m"
fun_bar 'apt-get install figlet -y' 'apt-get install lolcat -y'
apt-get install cowsay -y &>/dev/null
apt-get install toilet -y &>/dev/null

# Configurando firewall
if [[ -f "/usr/sbin/ufw" ]]; then
  ufw allow 443/tcp
  ufw allow 80/tcp
  ufw allow 3128/tcp
  ufw allow 8799/tcp
  ufw allow 8080/tcp
fi

# Configurando .bashrc
{
  echo 'figlet -k SSH-PLUS | lolcat'
  echo 'echo ""'
  echo 'echo -e "\t\033[92mPARA MOSTRAR OS COMANDOS DIGITE: \033[93mmenu\033[92m" | boxes -d cat -a hc -p h8 | lolcat'
  echo 'echo ""'
} >> /root/.bashrc

# Exibindo mensagem de conclusão
echo -e "\n\033[1;32mInstalação concluída!\033[0m"

# Limpeza final
cd "$HOME"
rm -f "$HOME/Plus"
> ~/.bash_history
history -c
